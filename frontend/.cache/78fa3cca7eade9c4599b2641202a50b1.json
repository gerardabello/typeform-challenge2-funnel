{"dependencies":[{"name":"/Users/carlos/typeform-challenge2-funnel/frontend/package.json","includedInParent":true,"mtime":1521642255000},{"name":"/Users/carlos/typeform-challenge2-funnel/frontend/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./_isArray","loc":{"line":1,"column":36}}],"generated":{"js":"var _isArray = /*#__PURE__*/require('./_isArray');\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\nmodule.exports = _checkForMethod;","map":{"mappings":[{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ramda/src/internal/_checkForMethod.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}}],"sources":{"node_modules/ramda/src/internal/_checkForMethod.js":"var _isArray = /*#__PURE__*/require('./_isArray');\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\nmodule.exports = _checkForMethod;"},"lineCount":25}},"hash":"88143ea2f9ee5e46f5b9fdf35d3e147b","cacheData":{"env":{}}}