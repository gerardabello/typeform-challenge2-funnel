{"dependencies":[{"name":"/Users/carlos/typeform-challenge2-funnel/frontend/package.json","includedInParent":true,"mtime":1521646651000},{"name":"/Users/carlos/typeform-challenge2-funnel/frontend/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry2","loc":{"line":1,"column":35}},{"name":"./internal/_equals","loc":{"line":3,"column":35}}],"generated":{"js":"var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _equals = /*#__PURE__*/require('./internal/_equals');\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\n\n\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nmodule.exports = equals;","map":{"mappings":[{"source":"node_modules/ramda/src/equals.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ramda/src/equals.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/ramda/src/equals.js":"var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _equals = /*#__PURE__*/require('./internal/_equals');\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\n\n\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nmodule.exports = equals;"},"lineCount":35}},"hash":"eb74468bcbf5a83a5c0098936b2d1f44","cacheData":{"env":{}}}