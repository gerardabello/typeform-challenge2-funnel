{"dependencies":[{"name":"/Users/carlos/typeform-challenge2-funnel/frontend/package.json","includedInParent":true,"mtime":1521642255000},{"name":"/Users/carlos/typeform-challenge2-funnel/frontend/node_modules/ramda/package.json","includedInParent":true,"mtime":1507569560000},{"name":"./internal/_curry2","loc":{"line":1,"column":20}},{"name":"./internal/_dispatchable","loc":{"line":2,"column":26}},{"name":"./internal/_xtap","loc":{"line":3,"column":18}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require('./internal/_curry2');\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _dispatchable2 = require('./internal/_dispatchable');\n\nvar _dispatchable3 = _interopRequireDefault(_dispatchable2);\n\nvar _xtap2 = require('./internal/_xtap');\n\nvar _xtap3 = _interopRequireDefault(_xtap2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nvar tap = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xtap3.default, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\nexports.default = tap;","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":2,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":5,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":0}},{"name":"tap","generated":{"line":41,"column":4},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":4}},{"generated":{"line":41,"column":10},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":10}},{"generated":{"line":41,"column":23},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":23}},{"generated":{"line":41,"column":45},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":32}},{"generated":{"line":41,"column":58},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":45}},{"generated":{"line":41,"column":86},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":59}},{"generated":{"line":41,"column":88},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":45}},{"generated":{"line":41,"column":106},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":70}},{"name":"tap","generated":{"line":41,"column":115},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":79}},{"generated":{"line":41,"column":118},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":70}},{"name":"fn","generated":{"line":41,"column":119},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":83}},{"generated":{"line":41,"column":121},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":70}},{"name":"x","generated":{"line":41,"column":123},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":87}},{"generated":{"line":41,"column":124},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":70}},{"generated":{"line":41,"column":126},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":90}},{"name":"fn","generated":{"line":42,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":26,"column":2}},{"name":"x","generated":{"line":42,"column":5},"source":"node_modules/ramda/es/tap.js","original":{"line":26,"column":5}},{"generated":{"line":42,"column":6},"source":"node_modules/ramda/es/tap.js","original":{"line":26,"column":2}},{"generated":{"line":43,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":27,"column":2}},{"name":"x","generated":{"line":43,"column":9},"source":"node_modules/ramda/es/tap.js","original":{"line":27,"column":9}},{"generated":{"line":43,"column":10},"source":"node_modules/ramda/es/tap.js","original":{"line":27,"column":2}},{"generated":{"line":44,"column":0},"source":"node_modules/ramda/es/tap.js","original":{"line":28,"column":1}},{"generated":{"line":44,"column":1},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":45}},{"generated":{"line":44,"column":2},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":23}},{"generated":{"line":44,"column":3},"source":"node_modules/ramda/es/tap.js","original":{"line":25,"column":0}},{"name":"tap","generated":{"line":45,"column":18},"source":"node_modules/ramda/es/tap.js","original":{"line":29,"column":15}}],"sources":{"node_modules/ramda/es/tap.js":"import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xtap from './internal/_xtap';\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nvar tap = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\nexport default tap;"},"lineCount":null}},"hash":"e923ae92e3b3fd7fb289dccfcfa434f5","cacheData":{"env":{}}}